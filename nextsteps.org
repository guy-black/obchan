
2.  figure out how to handle image upload
5.  make the front end rough draft


*Frontend routes
    **main
        -text input to create a post
            - button for image upload
            - button for post
            - backend route MkPost (post)
        -list of posts
            - image on left post on right
            - up to 3 comments on post
            - click on post to view full
              -chgroute viewpost (postId)
    **vewPost(postId)
        -image on top left
        -entire post
        -list of comments
            -image on left
            -post id and timestamp on top
                -clicking post id scrolls down and shifts focus to the add comment text box and adds >>[id]
            -text of comment
                -if comment contains a >>[id], it is a link to that post
        -text box to add comment
            -can add >>[id]

frontendroutes case
    Main -> render header
            new thread box
                submit button underneath calls to NewTh
            render results of ListPosts
    ViewPost -> render header
                render results of GetPost
                text input box for comments
                    submit button clls to NewCom

-pasterequest
    -carries one text element
    -of the ToJson and FromJson typeclass
    -given as argument to postJson
    -used for sending post to server from client
    -is the cargo that gets sent as json to the server
-paste
    -passed as argument to Id type
    -holds a text value
    -typeclass hasid
    -used for retrieving a post from the server.
